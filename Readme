Enunciado
Objetivo: Criar e gerenciar um banco de dados para o gerenciamento de eventos, incluindo a administração de eventos, participantes e inscrições.

Passos:

Criar o Banco de Dados: Nomeie o banco de dados como GerenciamentoEventos.
Criar Tabelas:
Eventos: Armazena informações sobre os eventos.
id_evento (INT, AUTO_INCREMENT, PRIMARY KEY)
nome_evento (VARCHAR(100), NOT NULL)
data (DATE, NOT NULL)
local (VARCHAR(255))
descricao (TEXT)
Participantes: Armazena informações sobre os participantes.
id_participante (INT, AUTO_INCREMENT, PRIMARY KEY)
nome (VARCHAR(100), NOT NULL)
email (VARCHAR(100), UNIQUE, NOT NULL)
telefone (VARCHAR(15))
Inscrições: Armazena informações sobre as inscrições dos participantes em eventos.
id_inscricao (INT, AUTO_INCREMENT, PRIMARY KEY)
id_evento (INT, FOREIGN KEY referenciando Eventos(id_evento))
id_participante (INT, FOREIGN KEY referenciando Participantes(id_participante))
data_inscricao (DATE, NOT NULL)
Inserir Dados:
Adicione registros de eventos, participantes e inscrições.
Consultas e Relatórios:
Liste todos os eventos disponíveis.
Mostre a lista de participantes inscritos em um evento específico.
Verifique todos os eventos nos quais um determinado participante está inscrito.
Liste todos os participantes que se inscreveram em mais de um evento.
Atualizar Dados:
Atualize a data e o local de um evento específico.
Atualize as informações de contato dos participantes.
Excluir Dados:
Remova eventos passados do banco de dados.
Cancele inscrições de participantes para determinados eventos.

# Gerenciamento de Eventos

Este projeto cria e gerencia um banco de dados para o gerenciamento de eventos, incluindo a administração de eventos, participantes e inscrições.

## Estrutura do Banco de Dados

### Tabelas

1. **Eventos**
   - `id_evento` (INT, AUTO_INCREMENT, PRIMARY KEY)
   - `nome_evento` (VARCHAR(100), NOT NULL)
   - `data` (DATE, NOT NULL)
   - `local` (VARCHAR(255))
   - `descricao` (TEXT)

2. **Participantes**
   - `id_participante` (INT, AUTO_INCREMENT, PRIMARY KEY)
   - `nome` (VARCHAR(100), NOT NULL)
   - `email` (VARCHAR(100), UNIQUE, NOT NULL)
   - `telefone` (VARCHAR(15))

3. **Inscrições**
   - `id_inscricao` (INT, AUTO_INCREMENT, PRIMARY KEY)
   - `id_evento` (INT, FOREIGN KEY referenciando `Eventos(id_evento)`)
   - `id_participante` (INT, FOREIGN KEY referenciando `Participantes(id_participante)`)
   - `data_inscricao` (DATE, NOT NULL)

## Operações

1. **Criação do Banco de Dados e Tabelas**

   Execute o script SQL fornecido para criar o banco de dados `GerenciamentoEventos` e as tabelas `Eventos`, `Participantes` e `Inscricoes`.

2. **Inserção de Dados**

   Adicione registros de eventos, participantes e inscrições conforme fornecido no script SQL.

3. **Consultas e Relatórios**

   - Liste todos os eventos disponíveis.
   - Mostre a lista de participantes inscritos em um evento específico substituindo o `id_evento` no comando SQL.
   - Verifique todos os eventos nos quais um determinado participante está inscrito substituindo o `id_participante`.
   - Liste todos os participantes que se inscreveram em mais de um evento.

4. **Atualização de Dados**

   - Atualize a data e o local de um evento específico substituindo o `id_evento`.
   - Atualize as informações de contato dos participantes substituindo o `id_participante`.

5. **Exclusão de Dados**

   - Remova eventos passados do banco de dados utilizando a data desejada.
   - Cancele inscrições de participantes para determinados eventos substituindo os IDs de participante e evento.

## Executando o Script SQL

1. Conecte-se ao servidor MySQL.
2. Copie e cole o código SQL fornecido em um cliente MySQL.
3. Execute o script para criar e gerenciar o banco de dados `GerenciamentoEventos`.

## Notas

- Certifique-se de que o banco de dados e as tabelas estejam limpos antes de executar comandos de inserção e exclusão para evitar conflitos.

